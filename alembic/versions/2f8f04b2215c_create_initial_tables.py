"""Create initial tables

Revision ID: 2f8f04b2215c
Revises: 
Create Date: 2024-05-18 12:00:00.000000

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '2f8f04b2215c'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('products',
    sa.Column('product_id', sa.Text(), nullable=False),
    sa.Column('brand', sa.Text(), nullable=True),
    sa.Column('name', sa.Text(), nullable=True),
    sa.Column('variant', sa.Text(), nullable=True),
    sa.Column('ingredients', sa.Text(), nullable=True),
    sa.Column('created_ts', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('product_id')
    )
    op.create_table('detection_logs',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('condition', sa.Text(), nullable=True),
    sa.Column('area', sa.Text(), nullable=True),
    sa.Column('ts', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('staging_raw_offers',
    sa.Column('offer_id', sa.Text(), nullable=False),
    sa.Column('json_blob', sa.Text(), nullable=True),
    sa.Column('last_seen_ts', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('offer_id')
    )
    op.create_table('offers',
    sa.Column('offer_id', sa.Text(), nullable=False),
    sa.Column('product_id', sa.Text(), nullable=True),
    sa.Column('retailer', sa.Text(), nullable=True),
    sa.Column('price', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('currency', sa.CHAR(length=3), nullable=True),
    sa.Column('rating', sa.Numeric(precision=2, scale=1), nullable=True),
    sa.Column('url', sa.Text(), nullable=True),
    sa.Column('availability', sa.Text(), nullable=True),
    sa.Column('last_seen_ts', sa.TIMESTAMP(), nullable=True),
    sa.Column('etl_sync_ts', sa.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['products.product_id'], ),
    sa.PrimaryKeyConstraint('offer_id')
    )
    op.create_table('condition_tags',
    sa.Column('product_id', sa.Text(), nullable=False),
    sa.Column('condition', sa.Text(), nullable=False),
    sa.ForeignKeyConstraint(['product_id'], ['products.product_id'], ),
    sa.PrimaryKeyConstraint('product_id', 'condition')
    )
    op.create_table('price_history',
    sa.Column('offer_id', sa.Text(), nullable=False),
    sa.Column('ts', sa.TIMESTAMP(), nullable=False),
    sa.Column('price', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.ForeignKeyConstraint(['offer_id'], ['offers.offer_id'], ),
    sa.PrimaryKeyConstraint('offer_id', 'ts')
    )
    # ### end Alembic commands ###

    # Create Materialized View
    op.execute("""
    CREATE MATERIALIZED VIEW products_latest AS
    SELECT DISTINCT ON (o.product_id) o.*, p.brand, p.name, p.variant
    FROM offers o JOIN products p USING(product_id)
    ORDER BY o.product_id, o.last_seen_ts DESC;
    """)
    op.execute("""
    CREATE INDEX idx_cond ON condition_tags(condition);
    """)

def downgrade():
    op.execute("DROP MATERIALIZED VIEW products_latest;")
    op.execute("DROP INDEX idx_cond;")
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('price_history')
    op.drop_table('condition_tags')
    op.drop_table('offers')
    op.drop_table('staging_raw_offers')
    op.drop_table('detection_logs')
    op.drop_table('products')
    # ### end Alembic commands ### 